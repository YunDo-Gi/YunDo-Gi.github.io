[ { "title": "Node.js 관련 내용 정리", "url": "/posts/Node.js-%EA%B4%80%EB%A0%A8-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC/", "categories": "Programming, Back-end", "tags": "node.js", "date": "2021-12-12 23:40:00 +0900", "snippet": "Node.js [Index Node.js v17.2.0 Documentation](https://nodejs.org/dist/latest-v16.x/docs/api/) = JS runtimeit’s just javascript that runs outside of the browserWhat can we build? Web Servers Command Line Tools Native Apps (ex. VS Code) Video Games Dron SoftwareREPLits like the console in the browser. it acts almost the sameCommands global : similar to window in the DOM. its the top scale of everything node Filename (or the reference of the path to the directory): execute file in node$ node app.jsModuleswe can require a file we have written by using require(&#39;&#39;)// app.jsconst math = require(&#39;./math&#39;) // we don&#39;t need &quot;.js&quot;// and when we are referencing a file wather than module we need to &quot;./&quot; to make it clear// that we&#39;re referencing something in the same directoryBut this dosen’t mean that the contents of the file are just automatically available (this is the difference with putting in a script in the html file( = load allof their stuff)). We need to explicitly say what we want to export out of the file.module.exports// math.jsconst add = (x, y) =&amp;gt; x + y;const PI = 3.14module.exports // default = empty objectmodule.exports.add = add;module.exports.PI = PI;//app.jsconst math = require(&#39;./math&#39;)const circle = 2 * math.PI * r;// also can destructureconst {add} = require(&#39;./math&#39;)console.log(add(1, 3));// also can replace module.exports entirelyconst math = { add: add, PI: PI}module.exports = math;exports : shorter syntax (acts the same, be careful not to assign a new value to exports)Requiring a DirectoryWhen we require a directory, node is going to look for an index file and whatever that file export is what the directory will export// index.jsconst red = require(&#39;./red&#39;);const blue = require(&#39;./blue&#39;);const colors = [red, blue]module.exports = colors;// paintpot/blue.js, paintpot/red.js// paintpot/index.js (in paintpot dir)// app.jsconst require = require(&#39;./paintpot&#39;)NPM - Node Package ManagerA library of tons and tons of packages published by other developers that we can use for free!A command line tool to easily install and manage those packages in our Node projectsWe can install packages by npm install package_name (on the terminal of course).$ npm install cowsay// index.jsconst red = require(&#39;cowsay&#39;);When we install like this we can only use the module only in the directory I installed (it is installed in node_modules folder, including all of the dependencies). What we did is we locally installed it.Installing packages globallynpm i -g package_name and to have access on it npm link package_nameusually we use this for command line based toolspackage.jsonIt includes metadateabout our project.When you install a package without package.json it will give you a error. (well its not essential)npm init : makes a package.json file (it conforms to the standard that we should follow)After you make package.json and install package in the directory, the dependency is documented in package.json(it acts like a record of everthing we use in this application)This is to keep it in sync what I’m doing with my node_modules, so that later on everyone canget the appropriate dependencies for this module (it means nothing to our code)Sharing modulesWhen we share module we don’t share the node_module. So to install all the dependencies for a project, we use npm install . This is going to look at package.json and install all the dependencies." } ]
